---
layout: "post"
title: "数据通信-TCP(1)"
date: "2017-12-14 19:18"
---
TCP协议
=====

### TCP协议:传输控制协议

* 面向连接:创建连接-数据传送-终止连接
* 可靠传输:
  * 发送应答机制:每发送一个信息,都会收到目标地址返回的确认收到信息
  * 超时重传:等待特定时间没有收到确认信息,会再次重新发送一遍,知道接收端返回给发送端确认收到信息
  * 错误校验:发送数据报文时会加上该数据的错误校验信息,接收方收到数据后拿收到的校验信息校验数据.如果吻合才会给发送端发送确认收收到信息.如果不吻合,接收方不会发送信息,等待发送方出发超时重传机制,重新发送该数据
  * 流量控制和阻塞管理:每次发送接收,接收方的接收缓冲区都会想发送方返回剩余空间信息(接收方接收缓存区剩余空间),这样发送方永远不会上传超过接收方接收极限的数据.避免数据丢失
* 基于字节流:
  * 数据传输,先放到TCP发送缓冲区,什么时候发,分多少段发,由TCP发送缓冲区决定.
  * 在传输报文时,是以字节为单位划分报文段的,按顺序传输按顺序接收,最后把字节拼接在一起,形成一个完成的报文数据

### TCP与UDP的不同点:

* 面向连接
* 有序数据传输
* 重发丢失的数据包
* 舍弃重复的数据包
* 无差错的数据传输
* 阻塞/流量控制

三次握手:
-----

> 建立连接:创建一个连接,在连接过程中双方发送了三个数据报文,通过报文之间的通信,双方确认了连接身份

### 建立连接:

* 客户端发送:
  * SYN:标志信息,请求和服务器建立连接
* 服务器收到连接请求,发送确认信息给客户端:
  * SYN
  * ACK:确认连接信息
* 客户端向服务器发送确认收到信息:
  * ACK

报文编号:客户端/服务器都持有自己的报文编号,每次发送报文时都会附带报文编号.收到保温后对方为了做出回应,会将收到的报文编号做加法处理,表示已经收到你所发送的报文

### 数据传输(应用层):

* 客户端发送数据到服务器
  * 对应的编号(报文大小,单位字节)
  * ACK确认信息
* 服务器想客户端发送确认信息
  * 编号信息(编号信息:自己维护的编号信息+接收报文的文件大小 :如接收20字节,发送8000编号,最后想客户端发送8020编号)
  * ACK
* 客户端想服务器发送确认信息:
  * ACK

编号信息:自己维护的编号信息+接收报文的文件大小 :如接收20字节,发送8000编号,最后想客户端发送8020编号

四次挥手:
-----

> 断开连接:任何一方都可以先提出关闭连接请求

### 断开连接:

* 主动关闭的一方发送关闭连接请求:
  * FIN标志
* 被动关闭的一方发送确认信息(依然可以继续想主动关闭的一方发送数据):
  * ACK
* 被动关闭的一方所有数据发送完成,发送主动关闭的一方可以断开连接的信息:
  * FIN
  * ACK
* 主动关闭的一方想被动关闭的一方发送确认信息,并关闭连接
  * ACK

TCP服务器代码实现:
-----------

### 监听队列:

1. 监听队列 保存关于各个客户端进行三次握手用到的数据
2. 当监听队列已满, 表示不能存储新的客户端的连接请求
3. 如果此时有新的客户端发来连接请求(第一次握手) 则直接将这个第一次我收的数据包丢弃 不处理
4. 当有一个客户端完成了三次握手 操作系统会将其数据 从监听队列移除.监听队列有了新的位置能够处理新的客户端的连接请求

```python
# 精简版
import socket

PORT = 8080


server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

address = ("", PORT)
server_sock.bind(address)
server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

server_sock.listen(128)


client_sock, client_addr = server_sock.accept()
print("客户端%s 已经建立了连接" % (client_addr,))

recv_data = client_sock.recv(1024)
print("接收到了客户端%s 传来的数据:%s" % ((client_addr,), recv_data.decode()))

msg = input("请输入要传给客户端的数据:")
client_sock.send(msg.encode())

client_sock.close()
server_sock.close()
```

当服务器使用accept方法接收了一个客户端的连接请求后,会返回一个新的socket对象,在这个新的socket对象中保存了与这个客户端进行数据传输所用到的数据资源信息,比如要保存在这个客户端通信室维护的数据报编号,还会保存客户端的ip地址/端口号等信息

```python
import socket

PORT = 8080

# 创建套接字
# socket.SOCK_STREAM 表明使用TCP协议 流式协议
server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 为服务器的socket绑定一个固定的ip地址和端口, 元组
address = ("", PORT)
server_sock.bind(address)
# socket.SOCK_STREAM 表明使用TCP协议 流式协议
server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# 为服务器的socket绑定一个固
# 让服务器开启监听, 可以收到客户端连接请求
# listen参数表示监听队列的大小, 最多能同时处理三次握手的客户端数量
server_sock.listen(128)

# 接收客户单的连接请求,与客户端完成三次握手
# 当前没有客户端发起连接 则会阻塞等待直到客户端发起连接

# client_sock 是一个新的socket对象, 用来跟这个连接的客户端进行一对一数据传输使用
# client_addr 是建立连接的客户端的地址,ip和端口 元组
client_sock, client_addr = server_sock.accept()
# print("客户端%s 已经建立了连接%s" % str(client_addr))
print("客户端%s 已经建立了连接" % (client_addr,))

# 接收客户端的数据
recv_data = client_sock.recv(1024)
print("接收到了客户端%s 传来的数据:%s" % ((client_addr,), recv_data.decode()))

# 向客户端发送数据
msg = input("请输入要传给客户端的数据:")
client_sock.send(msg.encode())

# 如果没有数据再传给客户端 可以关闭连接
client_sock.close()
# 如果不想再接收新的客户端连接请求 可以关闭server_socket
server_sock.close()

```
