---
layout: "post"
title: "软件测试-基础理论"
date: "2017-12-15 22:55"
---
软件开发模型
======

瀑布模式:
-----

定义阶段:

* 计划
* 需求分析

开发阶段:

* 设计
* 编码
* 测试

维护阶段:

* 运行
* 维护

优点:

* 开发的软件质量好

缺点:

* 早期的错误可能要等到开发后期的阶段才能实现
* 各阶段之间产生大量文档,极大的增加了工作量

适用的场合:

* 项目小,需求明确

敏捷式开发模型:
--------

测试根据需求,把整个项目分成不同的模块,每个模块按照测试标准给出开发需求,让开发按照需求开发

优点:

测试人员为开发提供开发标准,开发的产品能够保质保量,开发效率高

缺点:

测试人员要求有需求分析能力和一定的代码基础

软件测试定义:
=======

* 使用人工和自动手段来运行或测试某个系统的过程,其目的在于检验它是否满足规定的需求或弄清预期结果与实际结果之间的差别,保证软件质量

目的:
---

* 验证被测软件是否满足客户需求,找到二者之间的差异并解决,保证软件质量
* 避免后期出现致命问题,降低修复成本,尽早介入测试,在前期发现大量问题,保障项目能够按时验收/铲平集市上线

* 运行结果 来自-\> 需求
* 实际结果 来自-\> 预期结果

过程:
---

### 测试过程:

* 场内测试(公司内部测试):预生产环境
  * 单元测试流程
    * 对软件中的最小可测单元进行检查和验证
  * 集成测试流程
    * 在单元测试的基础上,将所有模块按照设计要求(如根据结构图)组装成为子系统或系统,进行集成测试
  * 系统测试流程
    * 将已经确认的软件/计算机硬件/外设/网络等其他元素结合在一起,进行信息系统的各种组黄测试和确认测试

* 场外测试
  * α测试
  * β测试

* 回归测试:重复测试,要求使用相同方法,使用相同的测试用例和数据,在相同的环境下进行测试
  * 完全回归
    * 所有的功能模块全部再测一遍(重复工作量大,耗时长)
  * 周边选择回归
    * 依据需求将与此功能相关联的部分再测试一遍

### 测试方法:

* 是否执行北侧软件划分
  * 静态测试
    * 计算机测试源程序时,计算机并不真正运行被测试的程序,只对被测程序进行特性分析
  * 动态测试
    * 真正运行被测程序,在执行过程中,通过输入有效的测试用例,对其输入与输出的对应关系进行分析,已达到检测的目的

* 测试对象不同划分
  * 黑盒测试
    * 也称功能测试,不需要代码,或程序的逻辑结构的情况下进行测试
  * 白盒测试
    * 基于代码的测试,能够看见程序的源码和逻辑机构,用于单元测试阶段
  * 灰盒测试
    * 介于白盒测试与黑盒测试之间,回合测试多用于集成测试阶段,看不见源码,但是知道程序的内部结构

* 执行手段划分
  * 手工测试
    * 不借助外部工具,用手点眼看的方式执行测试用例,完成测试的过程
  * 自动化测试
    * 借助外部工具,模仿手工测试过程,采用计算机自动化执行,完成测试的过程

软件质量模型:
=======

外部和内部质量:

* 功能性
  * 适合性:开发后的软件是否符合软件需求要实现的功能个数及名称
  * 准确性单个独立功能是否能够正确实现
  * 互操作性:接口之间的调用能否准确实现
  * 保密安全性:软件通过一些必要手段来保证软件的使用安全
    * 加密：数据传输过程中是否进行了加密处理（密码暗文显示，链接https）
    * 密码输入错误：密码连续三次输入错误，账户是否会被锁定
    * 验证码：验证码获取时间超时，接收到的验证码是否能够使用
    * 异地登录：可否支持多台设备登录，异地登录是否有提示，是否需要验证
    * 账号状态：登陆后在一定时间内没有做任何操作，是否需要重新登录才能正常使用
    * 权限：允许通过公司内部 IP 登录访问，外部 IP 地址是否有访问权限
  * 功能性的依从性:是否符合当地法律法规,是否符合软件行业标准
* 可靠性
  * 成熟性:
    * 当用户输入非法信息,或程序因外界因素异常退出时,系统有应对这些风险的能力,不至于意外崩溃后不能使用,\\
    * 风险不一定被触发,但是否提前在软件中预设解决机制
  * 容错性:当系统出现问题时是否有相应的提示信息以及具体的解决措施
  * 易恢复性:当系统出现故障时快速恢复正常的能力
  * 可靠性的依从性:是否符合当地法律法规,是否符合软件行业标准
* 易用性
  * 易理解性:文字或按钮是否容易让人明白
  * 易学性:输入数据或操作复杂时是否有提示信息
  * 易操作性:
    * 操作是否简单容易
    * 是否支持快捷键/方向键/Tab补齐键/手写板等
    * 针对的是软件受众群体
  * 吸引性:界面是否美观/内容是否有吸引力
  * 易用性的依从性:是否符合当地法律法规,是否符合软降行业标准
* 效率
  * 时间特性:软件运行时间符合软件需求的希望达到的时间
  * 资源利用性:资源占用率应小于软件需求的资源占用率
    * CPU--80%(手机发烫)
    * 内存—80%(手机卡/程序无响应)
    * 硬盘—75%
  * 效率依从性:是否符合当地法律法规,是否符合软件行业标准
* 维护性
  * 易分析性:当系统出现故障时是否容易定位缺陷,快速排查错误
  * 易改变性:当需求发生变更,所消耗的工作量和人员成本
  * 稳定性:当某一模块或功能出现故障时,是否会响应其他功能模块的正常使用(标准:系统稳定运行7\*24小时)
  * 易测试性:当某一模块或功能出现故障时,是否会影响测试其他功能模块
  * 维护性的依从性:是否符合当地法律法规,是否符合软降行业标准
* 可移植性
  * 适应性:是否适用于多种平台
  * 易安装性:安装是否容易,安装包是否包含所需的所有组件
  * 易替换性:
    * 软件的更新升级是否容易
    * 删除旧版本,安装新版本
    * 在原有版本上一键升级
    * 是否保留原始数据
  * 共存性:该软件部署在一个平台上是否会影响该平台上,其他软件的正常运行使用
  * 可移植性的依从性:是否符合当地的法律法规,是否符合软降行业标准
